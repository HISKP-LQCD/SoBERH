#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright Â© 2018 Martin Ueding <mu@martin-ueding.de>

import argparse
import pprint
import itertools
import os
import re

from termcolor import cprint


def print_present(is_present, digit):
    if is_present is None:
        print(' ', end='')
    else:
        if is_present:
            cprint(str(digit), color='grey', on_color='on_green', end='')
        else:
            cprint('.', color='white', on_color='on_red', end='')


def print_ticks(modulus, tick_step):
    print('      0', end='')
    for i in range(tick_step, modulus, tick_step):
        print(('{:' + str(tick_step) + 'd}').format(i), end='')
    print()

    print('      ', end='')
    for i in range(0, modulus, tick_step):
        print('|' + ' ' * (tick_step - 1), end='')
    print()


def add_missing_groups(groups, modulus):
    expected = set(range(groups[0][0], groups[-1][0] + 1))
    present = set([group for group, numbers in groups])

    missing = expected - present

    for m in missing:
        groups.append((m, []))

    return groups


def print_numbers(numbers, modulus):
    groups = itertools.groupby(numbers, lambda n: n // modulus)
    groups = [(group, list(numbers)) for group, numbers in groups]
    groups = add_missing_groups(groups, modulus)

    for i, (group, numbers) in enumerate(sorted(groups)):
        # Mark present and absent files.
        present = [False] * modulus
        for number in numbers:
            present[number % modulus] = True

        # If this is the first group, omit missing markers for all preceeding
        # ones.
        if i == 0:
            for j in range(modulus):
                if present[j]:
                    break
                present[j] = None

        # Similarly omit the remainder for the last group.
        if i == len(groups) - 1:
            for j in reversed(range(modulus)):
                if present[j]:
                    break
                present[j] = None

        print('{:4d}: '.format(group * modulus), end='')
        for p, d in zip(present, range(group * modulus, (group + 1) * modulus)):
            print_present(p, d % 10)
            pass


        print()


def main():
    options = _parse_args()

    pattern = re.compile(options.pattern)

    for directory in options.directory:
        for dirpath, dirnames, filenames in os.walk(directory):
            matches = [pattern.match(filename) for filename in filenames + dirnames]
            numbers = [int(match.group(1)) for match in matches if match]
            numbers.sort()

            dirnames.sort()

            if len(numbers) > 0:
                cprint(dirpath, attrs=['bold'])
                print()

                print_ticks(options.modulus, options.tick_step)
                print_numbers(numbers, options.modulus)
                print()
                print()


def _parse_args():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('directory', default=[os.getcwd()], nargs='*', help='Start directory, defaults to current working directory: %(default)s')
    parser.add_argument('--pattern', default=r'conf\.(\d{4})', help='Filename pattern, default: %(default)s')
    parser.add_argument('--modulus', type=int, default=100, help='Modulus, default: %(default)s')
    parser.add_argument('--tick-step', type=int, default=10, help='Spacing of ticks, default: %(default)s')
    options = parser.parse_args()

    return options


if __name__ == '__main__':
    main()
